package com.zx.test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class TestParameters {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String[] Parameters = args;
		ArrayList<String> dieReasonList = new ArrayList<String>();
		
		String output_dir = null,outputFileLog = null,inputFile = null,outputFile = null,outputBSJNumFile,outputFSJNumFile,outPutcircRNAClass,annotationFile,faFile = null,mitochondrion;
		int minMapqUni,maxCircle,minCircle,linear_range_size_min = 50000,strigency,relExp,threadNum,way;
		boolean intronLable,mlable;
		HashMap<String,String> parameterMap = new HashMap<String,String>();
		parameterMap.put("-I", "F");
		parameterMap.put("-O", "F");
		parameterMap.put("-F", "F");
		parameterMap.put("-A", "F");
		parameterMap.put("-G", "F");
		parameterMap.put("-H", "F");
		parameterMap.put("-Max", "200000");
		parameterMap.put("-Min", "140");
		parameterMap.put("-S", "2");
		parameterMap.put("-U", "10");
		parameterMap.put("-E", "0");
		parameterMap.put("-Mc", "0");
		parameterMap.put("-M", "chrM");
		parameterMap.put("-T", "1");			
		parameterMap.put("-It", "0");	
		parameterMap.put("-W", "0");
		parameterMap.put("--in", "F");
		parameterMap.put("--out", "F");
		parameterMap.put("--ref_file", "F");
		parameterMap.put("--anno", "F");
		parameterMap.put("--log", "F");
		parameterMap.put("--help", "F");
		parameterMap.put("--max_span", "200000");
		parameterMap.put("--min_span", "140");
		parameterMap.put("--strigency", "2");
		parameterMap.put("--mapq_uni", "10");
		parameterMap.put("--rel_exp", "0");
		parameterMap.put("--mitochondria", "0");
		parameterMap.put("--chrM", "chrM");
		parameterMap.put("--thread_num", "1");		
		parameterMap.put("--intron", "0");
		parameterMap.put("--way", "0");
		for (int i = 0; i < Parameters.length-1; i++) {
			if (Parameters[i].startsWith("-")) {
				parameterMap.put(Parameters[i], Parameters[i+1]);
			}
		}
		if (Parameters[Parameters.length-1].startsWith("-")) {
			parameterMap.put(Parameters[Parameters.length-1], "T");
		}
		
		if (!parameterMap.get("-H").equals("F")) {
			System.out.println("Program:  CIRI3 (circRNA identifier3)\r\n"
					+ "Version:  $version\r\n"
					+ "Contact:  Xin Zheng <zhengxin@big.ac.cn>\r\n"
					+ "\r\n"
					+ "Usage:    java CIRI3.jar -I in.sam -O output.ciri -F ref.fa \r\n"
					+ "\r\n"
					+ "Arguments:\r\n"
					+ "\r\n"
					+ "    -I, --in\r\n"
					+ "          Input SAM file name or SAM files list(required; generated by BWA-MEM)\r\n"
					+ "    -O, --out\r\n"
					+ "          Output circRNA file name(required)\r\n"
					+ "    -F, --ref_file\r\n"
					+ "          FASTA file of all reference sequences. Please make sure this file is\r\n"
					+ "          the same one provided to BWA-MEM (required).\r\n"
					+ "    -A, --anno\r\n"
					+ "          input GTF/GFF3 formatted annotation file name (optional)\r\n"
					+ "    -G, --log\r\n"
					+ "          output log file name (optional)\r\n"
					+ "    -H, --help\r\n"
					+ "          show this help information\r\n"
					+ "    -Max, --max_span\r\n"
					+ "          max spanning distance of circRNAs (default: 200000)\r\n"
					+ "    -Min, --min_span\r\n"
					+ "          min spanning distance of circRNAs (default: 140)\r\n"
					+ "    -S, --strigency\r\n"
					+ "          2: only output circRNAs supported by more than 2 distinct PCC signals (default)\r\n"
					+ "          1: only output circRNAs supported by more than 2 junction reads\r\n"
					+ "          0: output all circRNAs regardless junction read or PCC signal counts\r\n"
					+ "    -U, --mapq_uni\r\n"
					+ "          set threshold for mappqing quality of each segment of junction reads\r\n"
					+ "          (default: 10; should be within [0,30])\r\n"
					+ "    -E, --rel_exp\r\n"
					+ "          set threshold for relative expression calculated based on counts of\r\n"
					+ "          junction reads and non-junction reads (optional: e.g. 0.1)\r\n"
					+ "    -Mc, --mitochondria\r\n"
					+ "          0: Skip the recognition of  mitochondria circRNA (default)\r\n"
					+ "          1: Perform the recognition of mitochondria circRNA (the ID of mitochondrion in reference file is required)\r\n"
					+ "    -M, --chrM\r\n"
					+ "          tell CIRI3 the ID of mitochondrion in reference file(s) (default:\r\n"
					+ "          chrM)\r\n"
					+ "    -T, --thread_num\r\n"
					+ "          set number of threads for parallel running (default: 1)\r\n"
					+ "    -It, --intron\r\n"
					+ "          0: Skip the recognition of  intronic self-ligated circRNA (default)\r\n"
					+ "          1: Perform the recognition of intronic self-ligated circRNA (formatted annotation file is required)\r\n"
					+ "    -W, --way\r\n"
					+ "          0: Input a single SAM file to identify circRNA (default)\r\n"
					+ "          1: Input a SAM files list (including the absolute path to SAM files \r\n"
					+ "             and sample name) to identify circRNA\r\n"
					+ "          2: Input a SAM files list (including the absolute path to SAM files, \r\n"
					+ "             RNase information, and sample names) to identify circRNA, this can generate \r\n" 
					+ "             circRNA confidence score\r\n");
		}else if (parameterMap.get("-I").equals("F") && parameterMap.get("--in").equals("F")) {
			System.out.println("Please use --in or -I option to designate input SAM alignment file!");
		}else if (parameterMap.get("-O").equals("F") && parameterMap.get("--out").equals("F")) {
			System.out.println("Please use --out or -O option to designate output file!");
		}else if (parameterMap.get("-F").equals("F") && parameterMap.get("--ref_file").equals("F")) {
			System.out.println("Please use --ref-file or -F to designate one file with all references in!");
		}else {
			//input
			if (!parameterMap.get("-I").equals("F") || !parameterMap.get("--in").equals("F")) {
				if(!parameterMap.get("-I").equals("F")) {
					inputFile = parameterMap.get("-I");
				}else {
					inputFile = parameterMap.get("--in");
				}
				File inputFileTem = new File(inputFile); 
				inputFile = inputFileTem.getCanonicalPath();
			}
			File infile = new File(inputFile);
			if (!infile.isFile()) {
				dieReasonList.add("No SAM alignment file found at designated directory!");
			}
			//output
			if (!parameterMap.get("-O").equals("F") || !parameterMap.get("--out").equals("F")) {
				if(!parameterMap.get("-O").equals("F")) {
					outputFile = parameterMap.get("-O");
				}else {
					outputFile = parameterMap.get("--out");
				}	
				File outputFileTem = new File(outputFile); 
				outputFile = outputFileTem.getCanonicalPath();
			}
			output_dir = outputFile.substring(0,outputFile.lastIndexOf("/")+1);
			if (!new File(output_dir).exists()) {
				dieReasonList.add("Output file cannot be written in the directory "+outputFile+"!");
			}
			//log
			if (!parameterMap.get("-G").equals("F") || !parameterMap.get("--log").equals("F")) {
				if(!parameterMap.get("-G").equals("F")) {
					outputFileLog = parameterMap.get("-G");
				}else {
					outputFileLog = parameterMap.get("--log");
				}	
				File outputFileLogTem = new File(outputFileLog); 
				outputFileLog = outputFileLogTem.getCanonicalPath();
				output_dir = outputFileLog.substring(0,outputFileLog.lastIndexOf("/")+1);
				if (!new File(output_dir).exists()) {
					dieReasonList.add("Output log file cannot be written in the directory "+outputFileLog+"!");
				}
			}else {
				outputFileLog = outputFile+".log";
			}
			
			//fa
			if (!parameterMap.get("-F").equals("F") || !parameterMap.get("--ref_file").equals("F")) {
				if(!parameterMap.get("-F").equals("F")) {
					faFile = parameterMap.get("-F");
				}else {
					faFile = parameterMap.get("--ref_file");
				}	
				File faFileTem = new File(faFile); 
				faFile = faFileTem.getCanonicalPath();
			}	
			File fafile = new File(faFile);
			if (!fafile.isFile()) {
				dieReasonList.add("No FASTA file found at designated directory!");
			}
			//annotationFile
			if(!parameterMap.get("-A").equals("F")) {
				annotationFile = parameterMap.get("-A");	
				File annotationFileTem = new File(annotationFile); 
				annotationFile = annotationFileTem.getCanonicalPath();
				File annofile = new File(annotationFile);
				if (!annofile.isFile()) {
					dieReasonList.add("No formatted annotation file found at designated directory!");
				}
			}else if(!parameterMap.get("--anno").equals("F")) {
				annotationFile = parameterMap.get("--anno");
				File annotationFileTem = new File(annotationFile); 
				annotationFile = annotationFileTem.getCanonicalPath();
				File annofile = new File(annotationFile);
				if (!annofile.isFile()) {
					dieReasonList.add("No formatted annotation file found at designated directory!");
				}
			}else {
				annotationFile = "F";
			}
			//maxCircle
			if(!parameterMap.get("-Max").equals("200000")) {
				maxCircle = Integer.valueOf(parameterMap.get("-Max"));		
			}else if(!parameterMap.get("--max_span").equals("200000")) {
				maxCircle = Integer.valueOf(parameterMap.get("--max_span"));
			}else {
				maxCircle = 200000;
			}
			if (maxCircle < 10000) {
				dieReasonList.add("Max span size on reference should be larger than 10000!");
			}
			//minCircle
			if(!parameterMap.get("-Min").equals("140")) {
				minCircle = Integer.valueOf(parameterMap.get("-Min"));		
			}else if(!parameterMap.get("--min_span").equals("140")) {
				minCircle = Integer.valueOf(parameterMap.get("--min_span"));
			}else {
				minCircle = 140;
			}
			if (minCircle < 0) {
				dieReasonList.add("The min spanning distance of circRNA should be larger than 0!");
			}
			//strigency
			if(!parameterMap.get("-S").equals("2")) {
				strigency = Integer.valueOf(parameterMap.get("-S"));		
			}else if(!parameterMap.get("--strigency").equals("2")) {
				strigency = Integer.valueOf(parameterMap.get("--strigency"));
			}else {
				strigency = 2;
			}
			if (strigency != 0 && strigency != 1 && strigency != 2) {
				dieReasonList.add("--strigency or -S can only be 0, 1, 2!");
			}
			//minMapqUni
			if(!parameterMap.get("-U").equals("10")) {
				minMapqUni = Integer.valueOf(parameterMap.get("-U"));		
			}else if(!parameterMap.get("--mapq_uni").equals("10")) {
				minMapqUni = Integer.valueOf(parameterMap.get("--mapq_uni"));
			}else {
				minMapqUni = 10;
			}
			if (minMapqUni < 0 || minMapqUni > 30) {
				dieReasonList.add("--mapq_uni or -U can only be between 0 and 30!");
			}			
			//relExp
			if(!parameterMap.get("-E").equals("0")) {
				relExp = Integer.valueOf(parameterMap.get("-E"));		
			}else if(!parameterMap.get("--rel_exp").equals("0")) {
				relExp = Integer.valueOf(parameterMap.get("--rel_exp"));
			}else {
				relExp = 0;
			}
			if (relExp < 0 || relExp > 1) {
				dieReasonList.add("--rel_exp or -E can only be between 0 and 1!");
			}
			//mitochondrion
			if(!parameterMap.get("-Mc").equals("0")) {
				mlable = true;		
			}else if(!parameterMap.get("--mitochondria").equals("0")) {
				mlable = true;
			}else {
				mlable = false;
			}
			//chrM
			if(!parameterMap.get("-M").equals("chrM")) {
				mitochondrion = parameterMap.get("-M");		
			}else if(!parameterMap.get("--chrM").equals("chrM")) {
				mitochondrion = parameterMap.get("--chrM");
			}else {
				mitochondrion = "chrM";
			}
			//threadNum
			if(!parameterMap.get("-T").equals("1")) {
				threadNum = Integer.valueOf(parameterMap.get("-T"));		
			}else if(!parameterMap.get("--thread_num").equals("1")) {
				threadNum = Integer.valueOf(parameterMap.get("--thread_num"));
			}else {
				threadNum = 1;
			}
			//intronLable
			if(!parameterMap.get("-It").equals("0")) {
				intronLable = true;		
			}else if(!parameterMap.get("--intron").equals("0")) {
				intronLable = true;		
			}else {
				intronLable = false;
			}
			//way
			if(!parameterMap.get("-W").equals("0")) {
				way = Integer.valueOf(parameterMap.get("-W"));		
			}else if(!parameterMap.get("--way").equals("0")) {
				way = Integer.valueOf(parameterMap.get("--way"));
			}else {
				way = 0;
			}
			if (way != 0 && way != 1 && way != 2) {
				dieReasonList.add("--way or -W can only be 0, 1, 2!");
			}
			//other
			outputBSJNumFile = output_dir+"BSJ_count.txt";
			outputFSJNumFile = output_dir+"FSJ_count.txt";
			outPutcircRNAClass = output_dir+"class.txt";
			if(intronLable == true && annotationFile == "F") {
				dieReasonList.add("Identification of intronic self-ligated circRNA requires formatted annotation file!");
			}
			if(dieReasonList.size()>0) {
				for (String die : dieReasonList) {
					System.out.println(die);
				}
			}else {
				if (way == 0) {
					if (threadNum == 1) {
						SingleTest ST = new SingleTest(minMapqUni, maxCircle, minCircle,linear_range_size_min,intronLable,strigency,relExp,mitochondrion,mlable);
						ST.CIRI3(inputFile, outputFile,annotationFile, faFile,"");
					}else {
						MutTest mutTest = new MutTest(minMapqUni, maxCircle, minCircle,linear_range_size_min,intronLable,strigency,relExp,mitochondrion,mlable);
						mutTest.CIRI3(inputFile, outputFile,annotationFile, faFile,threadNum,"");
					}
				}else if (way == 1) {
					if (threadNum == 1) {
						FileTest fileTest = new FileTest(minMapqUni, maxCircle, minCircle,linear_range_size_min,intronLable,strigency,relExp,mitochondrion,mlable);
						fileTest.CIRI3(inputFile, outputFile,annotationFile, faFile,"");
					}else {
						MutFileTest mutFileTest = new MutFileTest(minMapqUni, maxCircle, minCircle,linear_range_size_min,intronLable,strigency,relExp,mitochondrion,mlable);
						mutFileTest.CIRI3(inputFile, outputFile,annotationFile, faFile, threadNum,"");
					}
				}else if (way == 2) {
					if (threadNum == 1) {
						FileTsvTest fileTsvTest = new FileTsvTest(minMapqUni, maxCircle, minCircle,linear_range_size_min,intronLable,strigency,relExp,mitochondrion,mlable);
						fileTsvTest.CIRI3(inputFile, outputFile,annotationFile, faFile,"");
					}else {
						MutTsvFileTest mutTsvFileTest = new MutTsvFileTest(minMapqUni, maxCircle, minCircle,linear_range_size_min,intronLable,strigency,relExp,mitochondrion,mlable);
						mutTsvFileTest.CIRI3(inputFile, outputFile,annotationFile, faFile, threadNum,"");
					}
				}
				
				
			}
			
			
		}
		
		
	}

}
